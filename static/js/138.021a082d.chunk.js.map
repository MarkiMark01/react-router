{"version":3,"file":"static/js/138.021a082d.chunk.js","mappings":"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","sources":["components/pages/MovieDetails/MovieDetails.jsx","components/services/fetchMovies.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchMoviesDetails } from \"../../services/fetchMovies\"; // Updated function name\r\nimport {\r\n  useParams,\r\n  useNavigate,\r\n  Link,\r\n  Outlet,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\n\r\nconst MovieDetails = () => {\r\n  const [state, setState] = useState({\r\n    items: {},\r\n    isLoading: false,\r\n    error: null,\r\n  });\r\n\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const location = useLocation();\r\n  const { from } = location.state;\r\n\r\n  useEffect(() => {\r\n    const fetchMovieDetailsData = async () => {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: true,\r\n      }));\r\n      try {\r\n        const result = await fetchMoviesDetails(id);\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          items: result,\r\n        }));\r\n      } catch (error) {\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          error: error.message,\r\n        }));\r\n      } finally {\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isLoading: false,\r\n        }));\r\n      }\r\n    };\r\n    fetchMovieDetailsData();\r\n  }, [id]);\r\n\r\n  const goBack = () => {\r\n    const from = location.state ? location.state.from : \"/\";\r\n    navigate(from);\r\n  };\r\n\r\n  const { items, isLoading, error } = state;\r\n\r\n  const genres = items.genres?.map((genre) => genre.name).join(\", \");\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <button onClick={goBack}>Go Back</button>\r\n      {isLoading ? (\r\n        <p>Loading...</p>\r\n      ) : error ? (\r\n        <p>{error}</p>\r\n      ) : (\r\n        <>\r\n          {items.poster_path && (\r\n            <img\r\n              src={`https://image.tmdb.org/t/p/w500/${items.poster_path}`}\r\n              alt={items.title}\r\n            />\r\n          )}\r\n          <h2>{items.title}</h2>\r\n\r\n          <ul>\r\n            <span>Genres:</span> {genres || \"no information\"}\r\n          </ul>\r\n\r\n          <p>{items.overview}</p>\r\n          <p>Rating: {items.vote_average}</p>\r\n          <div>\r\n            <div>\r\n              <Link state={{ from }} to={`/movies/${id}/reviews`}>\r\n                Reviews\r\n              </Link>\r\n            </div>\r\n            <div>\r\n              <Link state={{ from }} to={`/movies/${id}/cast`}>\r\n                Cast\r\n              </Link>\r\n            </div>\r\n            <Outlet />\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieDetails;\r\n","import axios from 'axios';\r\n\r\nconst APIKEY = '03bc4a4901e556f9924acb8dbfb5d03a';\r\nconst URL = 'https://api.themoviedb.org/3';\r\n\r\nexport const fetchMovies = async () => {\r\n    const page = 12;\r\n    try {\r\n        const { data } = await axios.get(`${URL}/movie/popular`, {\r\n            params: {\r\n                api_key: APIKEY,\r\n                page: page,\r\n            },\r\n        });\r\n        return data;\r\n    } catch (error) {\r\n        throw new Error(`Failed to fetch data: ${error.message}`);\r\n    }\r\n};\r\n\r\n\r\nexport const fetchMoviesDetails = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${URL}/movie/${id}`, {\r\n            params: {\r\n                api_key: APIKEY,\r\n            },\r\n        });\r\n        return data;\r\n    } catch (error) {\r\n        throw new Error(`Failed to fetch data: ${error.message}`);\r\n    }\r\n};\r\n\r\nexport const searchPosts = async (search) => {\r\n    try {\r\n        const response = await axios.get(`${URL}/search/movie`, {\r\n            params: {\r\n                api_key: APIKEY,\r\n                query: search,\r\n            },\r\n        });\r\n\r\n        return response.data.results;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n};\r\nexport const searchReviews = async (id) => {\r\n    try {\r\n        const response = await axios.get(`${URL}/search/movie/${id}/reviews`, {\r\n            params: {\r\n                api_key: APIKEY,\r\n                query: id,\r\n            },\r\n        });\r\n\r\n        return response.data.results;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport const getReviews = async id => {\r\n    return await fetch(\r\n        `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${APIKEY}&include_adult=false`\r\n    ).then(res => {\r\n        if (!res.ok) {\r\n            //   return Promise.reject(new Error(`No ${searchQuery} picture`));\r\n        }\r\n        return res.json();\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nconst options = { method: 'GET', headers: { accept: 'application/json' } };\r\n\r\nasync function getMovieReviews(movieId) {\r\n    const fetchURL = `${URL}/movie/${movieId}/reviews?api_key=${APIKEY}&language=en-US&page=1`;\r\n\r\n    try {\r\n        const response = await fetch(fetchURL, options);\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport { getMovieReviews };\r\n\r\n\r\n\r\n// async function getMovieCast(movieId) {\r\n//     const fetchURL = `${URL}/movie/${movieId}/cast?api_key=${APIKEY}&language=en-US&page=1`;\r\n\r\n//     try {\r\n//         console.log(\"Fetching from URL:\", fetchURL); // Add logging for the fetch URL\r\n//         const response = await fetch(fetchURL, options);\r\n//         if (!response.ok) {\r\n//             throw new Error('Movie cast not found or the request was not successful');\r\n//         }\r\n//         const data = await response.json();\r\n//         return data;\r\n//     } catch (error) {\r\n//         console.error(error);\r\n//         throw error;\r\n//     }\r\n// }\r\n\r\n// export { getMovieCast };\r\n\r\n\r\n\r\nexport const getMovieCast = async id => {\r\n    return await fetch(\r\n        `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${APIKEY}&include_adult=false`\r\n    ).then(res => {\r\n        if (!res.ok) {\r\n            //   return Promise.reject(new Error(`No ${searchQuery} picture`));\r\n        }\r\n        return res.json();\r\n    });\r\n};\r\n"],"names":["MovieDetails","_items$genres","state","setState","useState","items","isLoading","error","id","useParams","navigate","useNavigate","location","useLocation","from","useEffect","async","prevState","result","fetchMoviesDetails","message","fetchMovieDetailsData","genres","map","genre","name","join","_jsxs","className","children","_jsx","onClick","goBack","_Fragment","poster_path","src","concat","alt","title","overview","vote_average","Link","to","Outlet","APIKEY","URL","fetchMovies","data","axios","get","params","api_key","page","Error","searchPosts","query","search","results","options","method","headers","accept","getMovieReviews","movieId","fetchURL","response","fetch","ok","json","console","getMovieCast","then","res"],"sourceRoot":""}
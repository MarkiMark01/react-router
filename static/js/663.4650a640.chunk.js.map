{"version":3,"file":"static/js/663.4650a640.chunk.js","mappings":"yLAKA,MA0DA,EA1DgBA,KACd,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,CACjCC,MAAO,GACPC,WAAW,EACXC,MAAO,QAGDC,GAAIC,IAAYC,EAAAA,EAAAA,OAExBC,EAAAA,EAAAA,YAAU,KACkBC,WACxBT,GAAUU,IAAS,IACdA,EACHP,WAAW,MAEb,IACE,MAAMQ,QAAeC,EAAAA,EAAAA,IAAgBN,GACrCO,QAAQC,IAAI,UAAWH,GACvBX,GAAUU,IAAS,IACdA,EACHR,MAAOS,EAAOI,WAElB,CAAE,MAAOX,GACPJ,GAAUU,IAAS,IACdA,EACHN,MAAOA,EAAMY,WAEjB,CAAC,QACChB,GAAUU,IAAS,IACdA,EACHP,WAAW,KAEf,GAEFc,EAAmB,GAClB,CAACX,IAEJ,MAAM,MAAEJ,EAAK,UAAEC,EAAS,MAAEC,GAAUL,EAEpC,OACEmB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAOC,QAAQC,SAAA,CAE5BnB,IAAaoB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eAChBlB,IAASc,EAAAA,EAAAA,MAAA,KAAAI,SAAA,CAAG,UAAQlB,KACpBF,EAAMsB,OAAS,EACdtB,EAAMuB,KAAI,CAACC,EAAMC,KACfT,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACEJ,EAAAA,EAAAA,MAAA,KAAGC,UAAWC,EAAAA,EAAOQ,YAAYN,SAAA,CAAC,SAAOI,EAAKG,WAC9CN,EAAAA,EAAAA,KAAA,KAAGJ,UAAWC,EAAAA,EAAOU,eAAeR,SAAEI,EAAKK,YAFnCJ,MAMZJ,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gCAED,C,mFCzDV,MAAMU,EAAS,mCACTC,EAAM,+BAECC,EAAczB,UAEvB,IACI,MAAM,KAAE0B,SAAeC,EAAAA,EAAMC,IAAI,GAADC,OAAIL,EAAG,kBAAkB,CACrDM,OAAQ,CACJC,QAASR,EACTS,KALC,MAQT,OAAON,CACX,CAAE,MAAO/B,GACL,MAAM,IAAIsC,MAAM,yBAADJ,OAA0BlC,EAAMY,SACnD,GAIS2B,EAAqBlC,UAC9B,IACI,MAAM,KAAE0B,SAAeC,EAAAA,EAAMC,IAAI,GAADC,OAAIL,EAAG,WAAAK,OAAUjC,GAAM,CACnDkC,OAAQ,CACJC,QAASR,KAGjB,OAAOG,CACX,CAAE,MAAO/B,GACL,MAAM,IAAIsC,MAAM,yBAADJ,OAA0BlC,EAAMY,SACnD,GAGS4B,EAAcnC,UACvB,IAQI,aAPuB2B,EAAAA,EAAMC,IAAI,GAADC,OAAIL,EAAG,iBAAiB,CACpDM,OAAQ,CACJC,QAASR,EACTa,MAAOC,MAICX,KAAKpB,OACzB,CAAE,MAAOX,GACL,MAAMA,CACV,GAmCE2C,EAAU,CAAEC,OAAQ,MAAOC,QAAS,CAAEC,OAAQ,qBAEpDzC,eAAeG,EAAgBN,GAC3B,MAAM6C,EAAQ,GAAAb,OAAML,EAAG,WAAAK,OAAUhC,EAAO,qBAAAgC,OAAoBN,EAAM,0BAElE,IACI,MAAMoB,QAAiBC,MAAMF,EAAUJ,GACvC,IAAKK,EAASE,GACV,MAAM,IAAIZ,MAAM,+BAGpB,aADmBU,EAASG,MAEhC,CAAE,MAAOnD,GACLS,QAAQT,MAAMA,EAClB,CACJ,CA2BO,MAAMoD,EAAe/C,eACX4C,MAAM,sCAADf,OACwBjC,EAAE,qBAAAiC,OAAoBN,EAAM,yBACpEyB,MAAKC,IACEA,EAAIJ,GAGFI,EAAIH,S","sources":["components/pages/Reviews/Reviews.jsx","components/services/fetchMovies.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getMovieReviews } from \"../../services/fetchMovies\";\r\nimport styles from \"../../styles/styles.module.css\";\r\n\r\nconst Reviews = () => {\r\n  const [state, setState] = useState({\r\n    items: [],\r\n    isLoading: false,\r\n    error: null,\r\n  });\r\n\r\n  const { id: movieId } = useParams();\r\n\r\n  useEffect(() => {\r\n    const fetchMovieReviews = async () => {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: true,\r\n      }));\r\n      try {\r\n        const result = await getMovieReviews(movieId);\r\n        console.log(\"Result:\", result);\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          items: result.results,\r\n        }));\r\n      } catch (error) {\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          error: error.message,\r\n        }));\r\n      } finally {\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isLoading: false,\r\n        }));\r\n      }\r\n    };\r\n    fetchMovieReviews();\r\n  }, [movieId]);\r\n\r\n  const { items, isLoading, error } = state;\r\n\r\n  return (\r\n    <div className={styles.reviews}>\r\n      {/* <h2>Reviews</h2> */}\r\n      {isLoading && <p>Loading...</p>}\r\n      {error && <p>Error: {error}</p>}\r\n      {items.length > 0 ? (\r\n        items.map((item, index) => (\r\n          <div key={index}>\r\n            <p className={styles.reviewsUser}>User: {item.author}</p>\r\n            <p className={styles.reviewsContent}>{item.content}</p>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>Sorry, no comments yet...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reviews;\r\n","import axios from 'axios';\r\n\r\nconst APIKEY = '03bc4a4901e556f9924acb8dbfb5d03a';\r\nconst URL = 'https://api.themoviedb.org/3';\r\n\r\nexport const fetchMovies = async () => {\r\n    const page = 12;\r\n    try {\r\n        const { data } = await axios.get(`${URL}/movie/popular`, {\r\n            params: {\r\n                api_key: APIKEY,\r\n                page: page,\r\n            },\r\n        });\r\n        return data;\r\n    } catch (error) {\r\n        throw new Error(`Failed to fetch data: ${error.message}`);\r\n    }\r\n};\r\n\r\n\r\nexport const fetchMoviesDetails = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${URL}/movie/${id}`, {\r\n            params: {\r\n                api_key: APIKEY,\r\n            },\r\n        });\r\n        return data;\r\n    } catch (error) {\r\n        throw new Error(`Failed to fetch data: ${error.message}`);\r\n    }\r\n};\r\n\r\nexport const searchPosts = async (search) => {\r\n    try {\r\n        const response = await axios.get(`${URL}/search/movie`, {\r\n            params: {\r\n                api_key: APIKEY,\r\n                query: search,\r\n            },\r\n        });\r\n\r\n        return response.data.results;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n};\r\nexport const searchReviews = async (id) => {\r\n    try {\r\n        const response = await axios.get(`${URL}/search/movie/${id}/reviews`, {\r\n            params: {\r\n                api_key: APIKEY,\r\n                query: id,\r\n            },\r\n        });\r\n\r\n        return response.data.results;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport const getReviews = async id => {\r\n    return await fetch(\r\n        `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${APIKEY}&include_adult=false`\r\n    ).then(res => {\r\n        if (!res.ok) {\r\n            //   return Promise.reject(new Error(`No ${searchQuery} picture`));\r\n        }\r\n        return res.json();\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nconst options = { method: 'GET', headers: { accept: 'application/json' } };\r\n\r\nasync function getMovieReviews(movieId) {\r\n    const fetchURL = `${URL}/movie/${movieId}/reviews?api_key=${APIKEY}&language=en-US&page=1`;\r\n\r\n    try {\r\n        const response = await fetch(fetchURL, options);\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport { getMovieReviews };\r\n\r\n\r\n\r\n// async function getMovieCast(movieId) {\r\n//     const fetchURL = `${URL}/movie/${movieId}/cast?api_key=${APIKEY}&language=en-US&page=1`;\r\n\r\n//     try {\r\n//         console.log(\"Fetching from URL:\", fetchURL); // Add logging for the fetch URL\r\n//         const response = await fetch(fetchURL, options);\r\n//         if (!response.ok) {\r\n//             throw new Error('Movie cast not found or the request was not successful');\r\n//         }\r\n//         const data = await response.json();\r\n//         return data;\r\n//     } catch (error) {\r\n//         console.error(error);\r\n//         throw error;\r\n//     }\r\n// }\r\n\r\n// export { getMovieCast };\r\n\r\n\r\n\r\nexport const getMovieCast = async id => {\r\n    return await fetch(\r\n        `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${APIKEY}&include_adult=false`\r\n    ).then(res => {\r\n        if (!res.ok) {\r\n            //   return Promise.reject(new Error(`No ${searchQuery} picture`));\r\n        }\r\n        return res.json();\r\n    });\r\n};\r\n"],"names":["Reviews","state","setState","useState","items","isLoading","error","id","movieId","useParams","useEffect","async","prevState","result","getMovieReviews","console","log","results","message","fetchMovieReviews","_jsxs","className","styles","reviews","children","_jsx","length","map","item","index","reviewsUser","author","reviewsContent","content","APIKEY","URL","fetchMovies","data","axios","get","concat","params","api_key","page","Error","fetchMoviesDetails","searchPosts","query","search","options","method","headers","accept","fetchURL","response","fetch","ok","json","getMovieCast","then","res"],"sourceRoot":""}
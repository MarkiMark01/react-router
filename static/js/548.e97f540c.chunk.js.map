{"version":3,"file":"static/js/548.e97f540c.chunk.js","mappings":"yLAKA,MAqDA,EArDkBA,KAChB,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACnCC,GAAIC,IAAYC,EAAAA,EAAAA,OAExBC,EAAAA,EAAAA,YAAU,KASJF,GARmBG,WACrB,IACE,MAAMC,QAAaC,EAAAA,EAAAA,IAAaL,GAChCH,EAAaO,EACf,CAAE,MAAOE,GACPC,QAAQC,IAAIF,EACd,GAGAG,EACF,GACC,CAACT,IAEJ,MAAM,KAAEU,GAASd,EAEXe,EAAc,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAME,KAAIC,IAAA,IAAC,QAAEC,EAAO,KAAEC,EAAI,UAAEC,EAAS,aAAEC,GAAcJ,EAAA,OACnEK,EAAAA,EAAAA,MAAA,MAAkBC,UAAWC,EAAAA,EAAOC,OAAOC,SAAA,CACxCL,GACCM,EAAAA,EAAAA,KAAA,OACEC,IAAG,kCAAAC,OAAoCR,GACvCS,IAAKX,KAGPQ,EAAAA,EAAAA,KAAA,OACEC,IACE,4FAEFE,IAAKX,EACLY,MAAO,OAGXT,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGJ,UAAWC,EAAAA,EAAOQ,WAAWN,SAAEP,KAClCG,EAAAA,EAAAA,MAAA,KAAGC,UAAWC,EAAAA,EAAOS,YAAYP,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,OAAS,IAAEN,UAlBdF,EAqBJ,IAEP,OAAOJ,GAAQA,EAAKoB,OAAS,GAC3BP,EAAAA,EAAAA,KAAA,MAAIJ,UAAWC,EAAAA,EAAOV,KAAMqB,MAAO,CAAEC,eAAgB,QAASV,SAC3DX,KAGHY,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kEACJ,C,mFCrDH,MAAMW,EAAS,mCACTC,EAAM,+BAECC,EAAchC,UAEvB,IACI,MAAM,KAAEC,SAAegC,EAAAA,EAAMC,IAAI,GAADZ,OAAIS,EAAG,kBAAkB,CACrDI,OAAQ,CACJC,QAASN,EACTO,KALC,MAQT,OAAOpC,CACX,CAAE,MAAOE,GACL,MAAM,IAAImC,MAAM,yBAADhB,OAA0BnB,EAAMoC,SACnD,GAISC,EAAqBxC,UAC9B,IACI,MAAM,KAAEC,SAAegC,EAAAA,EAAMC,IAAI,GAADZ,OAAIS,EAAG,WAAAT,OAAU1B,GAAM,CACnDuC,OAAQ,CACJC,QAASN,KAGjB,OAAO7B,CACX,CAAE,MAAOE,GACL,MAAM,IAAImC,MAAM,yBAADhB,OAA0BnB,EAAMoC,SACnD,GAGSE,EAAczC,UACvB,IAQI,aAPuBiC,EAAAA,EAAMC,IAAI,GAADZ,OAAIS,EAAG,iBAAiB,CACpDI,OAAQ,CACJC,QAASN,EACTY,MAAOC,MAIC1C,KAAK2C,OACzB,CAAE,MAAOzC,GACL,MAAMA,CACV,GAmCE0C,EAAU,CAAEC,OAAQ,MAAOC,QAAS,CAAEC,OAAQ,qBAEpDhD,eAAeiD,EAAgBpD,GAC3B,MAAMqD,EAAQ,GAAA5B,OAAMS,EAAG,WAAAT,OAAUzB,EAAO,qBAAAyB,OAAoBQ,EAAM,0BAElE,IACI,MAAMqB,QAAiBC,MAAMF,EAAUL,GACvC,IAAKM,EAASE,GACV,MAAM,IAAIf,MAAM,+BAGpB,aADmBa,EAASG,MAEhC,CAAE,MAAOnD,GACLC,QAAQD,MAAMA,EAClB,CACJ,CA2BO,MAAMD,EAAeF,eACXoD,MAAM,sCAAD9B,OACwB1B,EAAE,qBAAA0B,OAAoBQ,EAAM,yBACpEyB,MAAKC,IACEA,EAAIH,GAGFG,EAAIF,S","sources":["components/pages/Cast/Cast.jsx","components/services/fetchMovies.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getMovieCast } from \"../../services/fetchMovies\";\r\nimport styles from \"../../styles/styles.module.css\";\r\n\r\nconst MovieCast = () => {\r\n  const [movieCast, setMovieCast] = useState([]);\r\n  const { id: movieId } = useParams();\r\n\r\n  useEffect(() => {\r\n    const movieCastFetch = async () => {\r\n      try {\r\n        const data = await getMovieCast(movieId);\r\n        setMovieCast(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    if (movieId) {\r\n      movieCastFetch();\r\n    }\r\n  }, [movieId]);\r\n\r\n  const { cast } = movieCast;\r\n\r\n  const element = cast?.map(({ cast_id, name, character, profile_path }) => (\r\n    <li key={cast_id} className={styles.castLi}>\r\n      {profile_path ? (\r\n        <img\r\n          src={`https://image.tmdb.org/t/p/w185${profile_path}`}\r\n          alt={name}\r\n        />\r\n      ) : (\r\n        <img\r\n          src={\r\n            \"https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg?20200913095930\"\r\n          }\r\n          alt={name}\r\n          width={185}\r\n        />\r\n      )}\r\n      <div>\r\n        <p className={styles.castTitles}>{name}</p>\r\n        <p className={styles.castTitlesP}>\r\n          <span>as</span> {character}\r\n        </p>\r\n      </div>\r\n    </li>\r\n  ));\r\n  return cast && cast.length > 0 ? (\r\n    <ul className={styles.cast} style={{ textDecoration: \"none\" }}>\r\n      {element}\r\n    </ul>\r\n  ) : (\r\n    <p>Unfortunately, there is no information about the actors yet...</p>\r\n  );\r\n};\r\n\r\nexport default MovieCast;\r\n","import axios from 'axios';\r\n\r\nconst APIKEY = '03bc4a4901e556f9924acb8dbfb5d03a';\r\nconst URL = 'https://api.themoviedb.org/3';\r\n\r\nexport const fetchMovies = async () => {\r\n    const page = 12;\r\n    try {\r\n        const { data } = await axios.get(`${URL}/movie/popular`, {\r\n            params: {\r\n                api_key: APIKEY,\r\n                page: page,\r\n            },\r\n        });\r\n        return data;\r\n    } catch (error) {\r\n        throw new Error(`Failed to fetch data: ${error.message}`);\r\n    }\r\n};\r\n\r\n\r\nexport const fetchMoviesDetails = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${URL}/movie/${id}`, {\r\n            params: {\r\n                api_key: APIKEY,\r\n            },\r\n        });\r\n        return data;\r\n    } catch (error) {\r\n        throw new Error(`Failed to fetch data: ${error.message}`);\r\n    }\r\n};\r\n\r\nexport const searchPosts = async (search) => {\r\n    try {\r\n        const response = await axios.get(`${URL}/search/movie`, {\r\n            params: {\r\n                api_key: APIKEY,\r\n                query: search,\r\n            },\r\n        });\r\n\r\n        return response.data.results;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n};\r\nexport const searchReviews = async (id) => {\r\n    try {\r\n        const response = await axios.get(`${URL}/search/movie/${id}/reviews`, {\r\n            params: {\r\n                api_key: APIKEY,\r\n                query: id,\r\n            },\r\n        });\r\n\r\n        return response.data.results;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport const getReviews = async id => {\r\n    return await fetch(\r\n        `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${APIKEY}&include_adult=false`\r\n    ).then(res => {\r\n        if (!res.ok) {\r\n            //   return Promise.reject(new Error(`No ${searchQuery} picture`));\r\n        }\r\n        return res.json();\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nconst options = { method: 'GET', headers: { accept: 'application/json' } };\r\n\r\nasync function getMovieReviews(movieId) {\r\n    const fetchURL = `${URL}/movie/${movieId}/reviews?api_key=${APIKEY}&language=en-US&page=1`;\r\n\r\n    try {\r\n        const response = await fetch(fetchURL, options);\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport { getMovieReviews };\r\n\r\n\r\n\r\n// async function getMovieCast(movieId) {\r\n//     const fetchURL = `${URL}/movie/${movieId}/cast?api_key=${APIKEY}&language=en-US&page=1`;\r\n\r\n//     try {\r\n//         console.log(\"Fetching from URL:\", fetchURL); // Add logging for the fetch URL\r\n//         const response = await fetch(fetchURL, options);\r\n//         if (!response.ok) {\r\n//             throw new Error('Movie cast not found or the request was not successful');\r\n//         }\r\n//         const data = await response.json();\r\n//         return data;\r\n//     } catch (error) {\r\n//         console.error(error);\r\n//         throw error;\r\n//     }\r\n// }\r\n\r\n// export { getMovieCast };\r\n\r\n\r\n\r\nexport const getMovieCast = async id => {\r\n    return await fetch(\r\n        `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${APIKEY}&include_adult=false`\r\n    ).then(res => {\r\n        if (!res.ok) {\r\n            //   return Promise.reject(new Error(`No ${searchQuery} picture`));\r\n        }\r\n        return res.json();\r\n    });\r\n};\r\n"],"names":["MovieCast","movieCast","setMovieCast","useState","id","movieId","useParams","useEffect","async","data","getMovieCast","error","console","log","movieCastFetch","cast","element","map","_ref","cast_id","name","character","profile_path","_jsxs","className","styles","castLi","children","_jsx","src","concat","alt","width","castTitles","castTitlesP","length","style","textDecoration","APIKEY","URL","fetchMovies","axios","get","params","api_key","page","Error","message","fetchMoviesDetails","searchPosts","query","search","results","options","method","headers","accept","getMovieReviews","fetchURL","response","fetch","ok","json","then","res"],"sourceRoot":""}